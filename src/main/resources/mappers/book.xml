<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.korit.library.repository.BookRepository">

    <select id="getBookTotalCount" parameterType="com.korit.library.web.dto.SearchNumberListReqDto" resultType="Integer">
        select
            count(*)
        from
            book_mst
        where
            1=1
            <if test='searchValue != null and searchValue !=""'>
                and	( <!--concat : mysql 문자열, 문자열을 합쳐준다-->
                book_name like CONCAT('%', #{searchValue}, '%')  <!--searchValue 는 표현식으로 나중에 바뀜.-->
                or author like CONCAT('%', #{searchValue}, '%')
                or publisher like CONCAT('%', #{searchValue}, '%')
                )
            </if>

            <if test = 'category != null and category !=""'>
                and category = #{category}    <!--쿼리 문법 : #{} -->
            </if>

    </select>

    <select id="searchBook" parameterType="com.korit.library.web.dto.SearchReqDto" resultType="com.korit.library.entity.BookMst">
        SELECT <!--표기방식....알리아스 alias-->
            bm.book_id as bookId,
            bm.book_code as bookCode,
            bm.book_name as bookName,
            bm.author,
            bm.publisher,
            bm.publication_date as publicationDate,
            bm.category,
            rd.rentalStatus
            <!--bl.like_id,
            bl.book_id,
            bl.user_id -->
        from
            book_mst bm
            left outer join(select
                                rd1.book_id,
                                if(rd2.return_date is null, 'Y', 'N') as rentalStatus
                            from
                                (select
                                    max(rental_dtl_id) as rental_dtl_id,
                                    book_id
                                from
                                    rental_dtl
                                group by
                                    book_id) rd1
                                left outer join rental_dtl rd2 on(rd2.rental_dtl_id = rd1.rental_dtl_id)) rd
            on(rd.book_id = bm.book_id)

            <!--left outer join book_like bl on(bl.book_id = bm.book_id and bl.user_id = #{userId})-->
        where
            1 = 1  <!-- 전체조회 편법 ㅎㅎ true를 놔둠으로 써 where아래가 없더라도 검색이 되게한다. -->

            <if test='searchValue != null and searchValue !=""'>
                and	( <!--concat : mysql 문자열, 문자열을 합쳐준다-->
                    bm.book_name like CONCAT('%', #{searchValue}, '%')  <!--searchValue 는 표현식으로 나중에 바뀜.-->
                    or bm.author like CONCAT('%', #{searchValue}, '%')
                    or bm.publisher like CONCAT('%', #{searchValue}, '%')
                )
            </if>

            <if test = 'category != null and category !=""'>
                and bm.category = #{category}    <!--쿼리 문법 : #{} -->
            </if>

        order by
            <choose> <!--else-->
                <when test = 'order == "bookName"'>bm.book_name,</when><!-- '가나다 순' --> <!--when = else if-->
                <when test = 'order == "author"'>bm.author,</when>
                <when test = 'order == "dateAsc"'>bm.publication_date,</when>
                <when test = 'order == "dateDesc"'>bm.publication_date desc,</when><!-- desc : 최신순 -->
                <!--<otherwise></otherwise> = else -->

            </choose>
                bm.book_id

            <if test = 'limit == "Y"'>
                limit #{index},#{count} <!-- limit #{page번호}, #{수량} -->
            </if>
    </select>

    <select id="userSearchBook" parameterType="com.korit.library.web.dto.SearchBookReqDto" resultType="com.korit.library.entity.BookMst">
        select
            bm.book_id,
            bm.book_code,
            bm.book_name,
            bm.author,
            bm.publisher,
            bm.publication_date,
            bm.category,
            bi.save_name,
            rd.rental_dtl_id,
            rd.return_date,
            rm.user_id,
            lc.like_count
        from
            book_mst bm
            left outer join book_image bi
                on(bi.book_code = bm.book_code)
            left outer join rental_dtl rd
                on(rd.book_id = bm.book_id and rd.return_date is null)
            left outer join rental_mst rm
                on(rm.rental_id = rd.rental_id and rm.user_id = #{userId})
            left outer join book_like bl
                on(bl.book_id = bm.book_id and bl.user_id = #{userId})
            left outer join
                (select
                    book_id,
                    count(book_id) as like_count
                from
                    book_like
                group by
                    book_id) lc on(lc.book_id = bm.book_id)
        where
            (bm.book_name like concat('%',#{searchValue},'%')
        or
            bm.author like concat('%',#{searchValue},'%')
        or
            bm.publisher like concat('%',#{searchValue},'%'))
        and
            bm.category in
            <foreach collection = "categories" item ="categoryName" open="(" close=")" separator=",">
                #{categoryName}
            </foreach>
        limit #{index},#{count}; <!--index 부터 count 개 만큼-->
    </select>


    <select id = "findBookByBookCode" parameterType="String" resultType="com.korit.library.entity.BookMst"> <!--parameterType 생략가능-->
        SELECT <!--표기방식....알리아스 alias-->
            book_id as bookId,
            book_code as bookCode,
            book_name as bookName,
            author,
            publisher,
            publication_date as publicationDate,
            category
        from
            book_mst
        where
            book_code = #{bookCode};

    </select>

    <select id="findAllCategory" resultType="com.korit.library.entity.CategoryView">
        select
            category_id,
            category
        from
            category_view
    </select>

    <insert id="saveBook" parameterType="com.korit.library.web.dto.BookReqDto">
        insert into book_mst
        values
            (0,#{bookCode}, #{bookName}, #{author},#{publisher},#{publicationDate},#{category})
    </insert>

    <!--put-->
    <update id = "updateBookByBookCode" parameterType="com.korit.library.web.dto.BookReqDto">
        update book_mst
        set
            book_name = #{bookName},
            author = if(#{author} = '',null,#{author}),
            publisher = if(#{publisher} = '',null,#{publisher}),
            publication_date = if(#{publicationDate} = '',null,#{publicationDate}),
            category = #{category}
        where
            book_code = #{bookCode}
    </update>

    <!--patch-->
    <update id = "maintainUpdateBookByBookCode" parameterType="com.korit.library.web.dto.BookReqDto">
        update book_mst
        set
            book_name = #{bookName},
            <if test = 'author != null and author !=""'>author = #{author},</if>
            <if test = 'publisher != null and publisher!=""'>publisher = #{publisher},</if>
            <if test = 'publicationDate != null'>publication_date = #{publicationDate},</if>
            category = #{category}
        where
            book_code = #{bookCode}
    </update>

    <delete id = "deleteBookByBookCode">
        delete
        from
            book_mst
        where
            book_code = #{bookCode}

    </delete>

    <delete id ="deleteBooks" parameterType="list">
        delete
        from
            book_mst
        where
            book_id in <!--book_id in(bookId, bookId)-->
            <foreach collection="list" item ="bookId" open="(" close=")" separator=",">
                #{bookId}
            </foreach>
    </delete>

    <insert id = "registerBookImages" parameterType="List">
        insert into book_image
        values
            <foreach collection = "list" item = "file" separator=","> <!--item = 변수명 -->
                (0, #{file.bookCode}, #{file.saveName}, #{file.originName})
            </foreach>

    </insert>

    <select id ="findBookImageAll" resultType="com.korit.library.entity.BookImage">
        select
            image_id as imageId,
            book_code as bookCode,
            save_name as saveName,
            origin_name as originName
        from
            book_image
        where
            book_code = #{bookCode}

    </select>
    <select id="findBookImageByImageId" resultType="com.korit.library.entity.BookImage">
        select
            image_id as imageId,
            book_code as bookCode,
            save_name as saveName,
            origin_name as originName
        from
            book_image
        where
            image_id = #{imageId}
    </select>

    <select id="findBookImageByBookCode" resultType="com.korit.library.entity.BookImage">
        select
            image_id as imageId,
            book_code as bookCode,
            save_name as saveName,
            origin_name as originName
        from
            book_image
        where
            book_code = #{bookCode}

    </select>

    <delete id = "deleteBookImage">
        delete
        from
            book_image
        where
            image_id = #{imageId};
    </delete>
</mapper>
